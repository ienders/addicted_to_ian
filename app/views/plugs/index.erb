<% plugs = [ 'liz', 'mally', 'kates', 'kimara', 'lucky', 'indagare', 'amazon', 'ibm', 'kanetix', 'weatheroffice', 'jonsonia' ] %>

<script type = "text/javascript">
  function PlugThumbs(options) {
    options = $.extend({ per_row: 4, visible_rows: 3 }, options);
    this.per_row = options.per_row;
    this.visible_rows = options.visible_rows;
    this.visible = true;
    this.thumbs = new Array();
    this.current_thumb = null;
    
    this.add = function(plug_thumb) {
      this.thumbs[plug_thumb.num] = plug_thumb;
    };
    this.get = function(num) {
      return this.thumbs[num];
    };
    this.fadeThumbs = function(except) {
      this.current_thumb = except;
      this.visible = false;
      this.to_fade = new Array();
      this.to_fade_index = 0;
      for (var i = 0; i < $('.thumb_holder').size(); i++) {
        if (parseInt(except.attr('rel')) != i) {
          this.to_fade.push(i);
        }
      }
      this.to_fade.sort(function() { return (Math.round(Math.random()) - 0.5) });
      this.randomFade($('#plug_' + this.to_fade[this.to_fade_index]));
    };
    this.randomFade = function(thumb) {
      self = this
      var j = parseInt(thumb.attr('rel'));
      thumb.fadeOut(100, function() {
        self.to_fade_index++;
        if (self.to_fade_index < self.to_fade.length) {
          self.randomFade($('#plug_' + self.to_fade[self.to_fade_index]));
        } else {
          self.slideThumbAndOpenPlug();
        }
      });
    };
    this.slideThumbAndOpenPlug = function() {
      self = this
      thumb = this.current_thumb
      thumb.find('img').attr('src', thumb.find('.large_img').html());
      thumb.animate({ left: 17, top: 27}, 2000, function() {
        thumb.find('img').animate({ height: 300, width: 500 }, 'medium', function() {
          $('#plug_main_' + self.current_thumb.attr('rel')).fadeIn('slow', function() {
            sifr_plugs();
            $('.plug_text').fadeIn('slow', function() { $('.plug_link_holder').fadeIn('slow', function() { $('.close').fadeIn('slow'); }); });
          });
        });
      });
    };
    this.closePlugAndRevertThumb = function() {
      self = this
      $('#plug_main_' + self.current_thumb.attr('rel')).fadeOut('slow', function() {
        var thumb = self.get(parseInt(self.current_thumb.attr('rel')));
        self.current_thumb.find('img').animate({ height: thumb.img_height, width: thumb.img_width }, 'medium', function() {
          self.current_thumb.animate({ left: thumb.thumb_left, top: thumb.thumb_top }, 'medium', function() {
            $('.plug_text').hide();
            $('.plug_link_holder').hide();
            $('.close').hide();
            $('.thumb_holder').fadeIn('fast');
            self.visible = true;
          });
        });
      });
    };
  }
  
  function PlugThumb(thumbs, obj) {
    this.obj = obj;
    this.num = parseInt(obj.attr('rel'));
    this.col = this.num % thumbs.per_row;
    this.row = (this.num - (this.num % thumbs.per_row)) / thumbs.per_row;
    this.img_height = parseInt(obj.find('img').css('height'));
    this.img_width  = parseInt(obj.find('img').css('width'));
    this.thumb_top  = (parseInt(obj.css('height')) - 1) * this.row;
    this.thumb_left = (parseInt(obj.css('width')) - 1) * this.col;
    
    this.freeze = function() {
      this.obj.css('position', 'absolute').css('top', this.thumb_top).css('left', this.thumb_left);
    }
  }

  var thumbs = new PlugThumbs();
  
  $(function() {
    // Initialize thumbs
    $('.thumb_holder').each(function() {
      var thumb = new PlugThumb(thumbs, $(this));
      thumbs.add(thumb);
      thumb.freeze();
    });
    
    $('.thumb_holder').click(function(e) {
      if (!thumbs.visible) {
        return;
      }
      thumbs.fadeThumbs($(this))
      e.preventDefault();
    });
    
    $('.thumb_holder').hover(
      function() {
        if (!thumbs.visible) {
          return;
        }
        $(this).find('.plug_title_overlay').slideToggle('fast', function() {
          $(this).find('span').fadeIn('fast');
        });
      },
      function() {
        if (!thumbs.visible) {
          $(this).find('span').hide();
          $(this).find('.plug_title_overlay').hide();
          return;
        }
        $(this).find('span').fadeOut('fast', function() {
          $(this).parents('.plug_title_overlay').slideToggle('fast');
        });
      }
    );
    
    $('.close').click(function(e) {
      thumbs.closePlugAndRevertThumb();
      e.preventDefault();
    });
    
  });
</script>

<div class = "plugs_content">
   <div class = "plug_thumb_wrapper">
    <% @plugs.each_with_index do |plug, i| %>
      <div class="thumb_holder" id = "plug_<%= i %>" rel = "<%= i %>">
        <%= link_to(image_tag(plug.plug_photo.public_filename(:thumb)), '#') %>
        <div class = "large_img" style = "display: none"><%= plug.plug_photo.public_filename %></div>
        <div class = "plug_title_overlay">
          <span style = "display: none"><%= plug.title %></span>
        </div>
      </div>
    <% end %>
  </div>
  
  <% @plugs.each_with_index do |plug, i| %>
    <div class = "plug" id = "plug_main_<%= i %>" style = "display: none">
      <%= image_tag("button_close.gif", :class => 'close', :style => 'display: none') %>
      <%= image_tag(plug.plug_photo.public_filename, :style => 'display: none') %>
      <div class = "plug_link_holder" style = "display: none">
        [ <%= link_to(plug.url, plug.url) %> ]
      </div>
      <div class = "plug_description_holder">
        <h3><%= plug.title %></h3>
        <% if_authorized? do %>
          <div class = "admin_links">
            <%= link_to('edit', edit_plug_path(plug)) %> &nbsp;&nbsp;
            <%= link_to('delete', plug_path(plug), :method => :delete, :confirm => 'Are you sure?') %>
          </div>
        <% end %>
        <div class = "plug_text" style = "display: none">
          <%= markdown(plug.description) %>
        </div>
      </div>
    </div>
  <% end %>
  
</div>
<% if_authorized? do %>
  <div class = "new_plug_link"><%= link_to 'New Plug', new_plug_path %></div>
<% end %>